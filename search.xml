<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重新学习计组day14</title>
      <link href="/posts/2dca4880.html"/>
      <url>/posts/2dca4880.html</url>
      
        <content type="html"><![CDATA[<h1 id="ROM只读存储器"><a href="#ROM只读存储器" class="headerlink" title="ROM只读存储器"></a>ROM只读存储器</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20155630.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20155849.png"><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20155402.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day13</title>
      <link href="/posts/b3.html"/>
      <url>/posts/b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="SRAM和DRAM"><a href="#SRAM和DRAM" class="headerlink" title="SRAM和DRAM"></a>SRAM和DRAM</h1><h2 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h2><p>主要用于cache<br>双稳态触发器：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20145615.png"><br>逻辑元件更多，造价贵功耗大，集成度低，不用刷新，速度更快</p><h2 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h2><p>主要用于主存（现在有SDRAM）<br>栅极电容：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20145834.png"><br>电容读出是破坏性读出，需要刷新速度更慢，但是元件简单，所占空间小，集成度高。<br>只有2ms的储存时间，需要刷新，而且是破坏性读出</p><h3 id="DRAM的刷新"><a href="#DRAM的刷新" class="headerlink" title="DRAM的刷新"></a>DRAM的刷新</h3><p>刷新周期一般为2ms，以行为单位，每次刷新一行储存单元。<br>为方便工程实践现，使用二维排列储存单元（一个单元有n个字节，按行排列，和本文提到的东西不是一个）如图所示：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20151606.png"><br>分为行列后所需的地址线大大减少原本需要 2^8 根选通线，现在分为行列表示后只需要2×2^4根选通线。  </p><h3 id="在什么时候刷新呢？"><a href="#在什么时候刷新呢？" class="headerlink" title="在什么时候刷新呢？"></a>在什么时候刷新呢？</h3><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20152421.png">  </p><h3 id="DRAM的-地址线-复用技术"><a href="#DRAM的-地址线-复用技术" class="headerlink" title="DRAM的 地址线 复用技术"></a>DRAM的 地址线 复用技术</h3><p>为节省 地址线 我们采用了地址线复用技术，分两次送行列地址。如图所示<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20152627.png"><br>这样我们使用的行列地址可以用一半地址线分别传输给两个译码器。  </p><h1 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20152710.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day12</title>
      <link href="/posts/b3aedd23.html"/>
      <url>/posts/b3aedd23.html</url>
      
        <content type="html"><![CDATA[<h1 id="主储存器的基本构成"><a href="#主储存器的基本构成" class="headerlink" title="主储存器的基本构成"></a>主储存器的基本构成</h1><h2 id="基本的半导体储存元原理"><a href="#基本的半导体储存元原理" class="headerlink" title="基本的半导体储存元原理"></a>基本的半导体储存元原理</h2><h3 id="读出原理"><a href="#读出原理" class="headerlink" title="读出原理"></a>读出原理</h3><p>控制电容的释放，如果电容没有电荷则为0，然则反之。  mos管（半导体元件）用来控制开关输出信号。  </p><h3 id="写入原理"><a href="#写入原理" class="headerlink" title="写入原理"></a>写入原理</h3><p>写入时输入电荷给电容器，由mos管控制是否输入，然后由导线的右端输入电压。</p><p>如图所示</p><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20143049.png">  </p><p>将多个存储源科学合理的链接，就会得到存储单元（每行就是一个，如图所示）<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20143618.png"><br>*红线控制mos管电压。  </p><h2 id="储存器芯片的基本原理"><a href="#储存器芯片的基本原理" class="headerlink" title="储存器芯片的基本原理"></a>储存器芯片的基本原理</h2><h3 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h3><p>地址总线输入n位地址到MAR中然后传递给译码器，由译码器启动特定红线。<br>有n位地址就有2^n个储存单元。  </p><h3 id="控制电路"><a href="#控制电路" class="headerlink" title="控制电路"></a>控制电路</h3><p>控制电路控制MAR,MDR,译码器。当电流稳定时控制电路便会打开相应的元件。  </p><h3 id="片选线-CE-CS"><a href="#片选线-CE-CS" class="headerlink" title="片选线(CE,CS)"></a>片选线(CE,CS)</h3><p>链接在控制电路上，当施加低电平时，该芯片的总开关接通，也就是正在工作。  </p><h3 id="读控制线（OE）和写控制线-WE"><a href="#读控制线（OE）和写控制线-WE" class="headerlink" title="读控制线（OE）和写控制线(WE)"></a>读控制线（OE）和写控制线(WE)</h3><p>和片选线一样，头上加横杠代表施加低电平。读写控制线可合二为一，由高电平读，低电平写。  </p><p>总体如图所示：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20150610.png"></p><h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>8k*8位的储存芯片。意味着2^13个存储单元和8bit的每个存储单元存储字长。<br>金属引脚或者针脚，判断至少有多少。也就是地址线和数据线，片选线，读写控制线（一根或者两根），供电引脚，  接地引脚</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20151959.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学数论基础</title>
      <link href="/posts/86df1209.html"/>
      <url>/posts/86df1209.html</url>
      
        <content type="html"><![CDATA[<h1 id="最大公因数与辗转相除法"><a href="#最大公因数与辗转相除法" class="headerlink" title="最大公因数与辗转相除法"></a>最大公因数与辗转相除法</h1><h2 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h2><p>设a b c是任意不全为0的整数，切a&#x3D;qb+c,q是最大除数，所以有（a,b）&#x3D;(b,c)  </p><h2 id="辗转相除法-（Euclid算法，欧几里德算法）"><a href="#辗转相除法-（Euclid算法，欧几里德算法）" class="headerlink" title="辗转相除法: （Euclid算法，欧几里德算法）"></a>辗转相除法: （Euclid算法，欧几里德算法）</h2><p>任给两个整数a，b，设 a &gt; b&gt;0，由代余数的除法，有下列等式：</p><pre><code>                        a = b * q1 + R1            ，0 &lt; R1 ＜ b，                          b = R1 * q2 + R2     ，0 &lt; R2 ＜ R1 ，                          .....                        Rn-2 = Rn-1 * qn + Rn     ，0 &lt; Rn ＜ Rn-1                           Rn-1 = Rn * qn+1 + Rn+1 ， Rn+1 = 0  </code></pre><p>所以Rn &#x3D;（a,b）。<br>给出定理:  </p><pre><code>            任给整数 a &gt; b &gt; 0 ，则存在两个整数 m, n 使得                       （a, b）= m a + n b            由上式，显然有推论：a 和 b 的公因数是(a,  b)的因数   </code></pre><h2 id="逆向迭代"><a href="#逆向迭代" class="headerlink" title="逆向迭代"></a>逆向迭代</h2><p>例：用辗转相除法求，a&#x3D;288，b&#x3D;158的最大公因数和m, n，使ma + nb&#x3D;(a, b)  </p><pre><code>                            288 = 158×1 + 130，                            158 = 130 ×1 + 28，                            130 = 28 × 4 + 18，                            28  = 18 ×1 + 10，                            18  = 10 ×1 + 8，                            10  = 8 ×1 + 2，                            8   = 2 ×4 + 0        因此，最大公因数 (a, b) = 2    再进行逆向迭代，   2 = 10-8 ×1               (代2)                        = 10-(18-10) ×1         (代8)                        = 10×2 -18                        = (28-18 ×1)×2 -18    (代10)                        = 28×2-18×3                        = 28×2-(130-28 × 4 )×3            (代18)                        = 28×14-130×3                        = (158-130 ×1 )×14- 130×3       (代28)                        = 158×14-130×17                        = 158×14-(288-158×1 )×17      (代130)                        = 158×31-288×17                          = - 17 × 288 + 31×158</code></pre><p>所以得出m&#x3D;-17 n&#x3D;31。</p><h1 id="素数（质数）"><a href="#素数（质数）" class="headerlink" title="素数（质数）"></a>素数（质数）</h1><p>若（a，b）&#x3D;1，则a与b互素。<br>素数(质数)的概念：      大于1的整数 被称为素数是指 p 的因子仅有1, －1,  p, －p。  </p><pre><code>            引理1：若p是素数，a是任意整数，则有 p | a 或 (p, a) = 1                    即素数与一个数要么互素，要么可整除该数。            引理2：若p是素数， p | ab ，则 p | a 或 p | b </code></pre><h1 id="任一整数-a-a-1-都能唯一地分解为以下形式"><a href="#任一整数-a-a-1-都能唯一地分解为以下形式" class="headerlink" title="任一整数 a ( a &gt;1)都能唯一地分解为以下形式"></a>任一整数 a ( a &gt;1)都能唯一地分解为以下形式</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20111404.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-21%20114047.png"><br>个人理解，x1之所以有0&lt;&#x3D;x&lt;&#x3D;3,是因为 2 的 0 次幂到 2 的 3 次幂都是该数的因子。其他以此类推。  </p><h1 id="用辗转相除法求逆元（扩展的Euclid算法）"><a href="#用辗转相除法求逆元（扩展的Euclid算法）" class="headerlink" title="用辗转相除法求逆元（扩展的Euclid算法）"></a>用辗转相除法求逆元（扩展的Euclid算法）</h1><p>任给整数 n &gt; a&gt;0 ，则存在两个整数 x,  y 使得  </p><pre><code>                            xa + yn = (a, n)</code></pre><p>当(a, n) &#x3D; 1时，即有  </p><pre><code>                            xa + yn = 1</code></pre><p>等式两端取模n，有  </p><pre><code>                            xa mod n=1</code></pre><p>即存在一个 x ，使得 a x ≡ 1 mod  n，如何求 x ?<br>【 例 】计算550^-1  mod  1769  </p><pre><code>    1769 = 550×3 + 119，        1 = 13－3 ×4   (代3)    550 = 119×4 + 74，            = 13－(16－13×1)×4 =13×5－16×4     (代13)    119 = 74× 1 + 45，            = (29－16×1 )×5－16×4 = 29×5 －16×9   (代16)    74 = 45×1 + 29，              = 29×5 －(45－29×1 )×9 =29×14 － 45×9   (代29)    45 = 29×1 + 16，              = (74－45×1 )×14－45×9  =74×14－45×23  (代45)    29 = 16×1 + 13，              = 74×14－(119－74×1)×23  = 74×37 －119×23 (代74)    16 = 13×1 + 3                 = (550－119×4 )×37 －119×23=550×37 －119×171(代119)    13 = 3 ×4 + 1                 = 550×37－(1769 －550×3 )×171                                    = 550×550 －1769×171</code></pre><p>有 x &#x3D; 550,   y &#x3D; －171  </p><pre><code>        所以    550^-1  mod  1769 = 550</code></pre><h1 id="剩余类与完全剩余类"><a href="#剩余类与完全剩余类" class="headerlink" title="剩余类与完全剩余类"></a>剩余类与完全剩余类</h1><h2 id="剩余类"><a href="#剩余类" class="headerlink" title="剩余类"></a>剩余类</h2><p>若取n&#x3D;4，整数分为 4 类：</p><pre><code>                     C0 = &#123; 4k +0 |  k∈Z &#125;                     C1 = &#123; 4k +1 |  k∈Z &#125;                     C2 = &#123; 4k +2 |  k∈Z &#125;                     C3 = &#123; 4k +3 |  k∈Z &#125;</code></pre><p>所以，当n &gt; 1时，整数分为 n 类： C0 ， C1 ，……，Cn-1   </p><pre><code>                     Cj = &#123; nk +j |  k∈Z &#125; ; j = 0,1,2,……,n－1</code></pre><p>称Cj为模n的一个剩余类（即“一类余数”）。  </p><h2 id="完全剩余类"><a href="#完全剩余类" class="headerlink" title="完全剩余类"></a>完全剩余类</h2><p>若从所有剩余类C0 ， C1 ，……，Cn-1类中各取一个数构成集合，该集合则称为模n的一组完全剩余系。         </p><h2 id="费马-Fermat-小定理与欧拉-Euler-定理"><a href="#费马-Fermat-小定理与欧拉-Euler-定理" class="headerlink" title="费马(Fermat)小定理与欧拉(Euler)定理"></a>费马(Fermat)小定理与欧拉(Euler)定理</h2><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>定义：欧拉函数(n)是一个定义在正整数集上的函数， (n)的值等于小于n且与 n互素的正整数的个数。<br>定理：设整数n (&gt;1)的唯一性分解形式为：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20124527.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-22%20124809.png"><br>在与模数n互素的的全部剩余类中，各取一数所组成的集合叫模n的一组缩系。如{1，3}为模4的一组缩系。</p><pre><code>            当 p 是一个素数，有 ( p) = p－1                 当 n 是两个素数 p 和 q的乘积，则对n = p q，有                              (n) = (p q) = (p) (q) = (p－1)(q－1)</code></pre><h4 id="互质（互素）"><a href="#互质（互素）" class="headerlink" title="互质（互素）"></a>互质（互素）</h4><pre><code>            若N个整数a1，a2，....，an的最大公因数是1，则称这N个整数互质  </code></pre><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>若 p 是素数，且不能整除a，则有：     </p><pre><code>                    a^(p－1)   ≡ 1 mod p     或     a^p ≡ a mod p                    显然， a^ [k(p－1)]   ≡ 1 mod p                     ∴ a^N = a^ [k(p－1) + r]≡ a^ [N mod (p－1)]  mod p </code></pre><p>举例：计算   7^560 mod 31 &#x3D; ?  </p><pre><code>              7^560             = 7^[(31 － 1) × 18 + 20]             ≡ 7^20 mod 31            ≡ 7^5 × 7^5 × 7^5 × 7^5 mod 31             ≡ 5 × 5 × 5 × 5 mod 31            ≡ 5 mod 31 </code></pre><p>若a不是p的倍数，且p为质数，则a^(p-1) mod p的余数为1</p><h3 id="同余符号"><a href="#同余符号" class="headerlink" title="同余符号"></a>同余符号</h3><p>含义  </p><pre><code>    两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余记作a≡b(mod m)读作a同余于b模m，或读作a与b关于模m同余。比如26≡14(mod 12)。</code></pre><h3 id="同余方程（组）与中国剩余定理"><a href="#同余方程（组）与中国剩余定理" class="headerlink" title="同余方程（组）与中国剩余定理"></a>同余方程（组）与中国剩余定理</h3><h4 id="同余方程求解注意事项："><a href="#同余方程求解注意事项：" class="headerlink" title="同余方程求解注意事项："></a>同余方程求解注意事项：</h4><p>首先要确定右边是否存在左边的因子，如图：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/20231023212545.png" alt="20231023212545"></p><h5 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h5><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/20231023212650.png" alt="20231023212650"></p><pre><code>                    105x -62 ≡ 1（mod 6）                          105x ≡ 63 （mod 6）            同上图，解得   5x ≡ 3 (mod 2)                           x ≡ 1 (mod 2)             得出x=(...-3,-1,1,3...)  </code></pre><p>原模数为n，最终模数为n’,设n&#x2F;n’ &#x3D; d,则0~n-1之间有d个解。<br>无解情况：a,n 的最大公约数必须在b也有，如下：</p><pre><code>                            ax ≡ b (mod n)</code></pre><p>例题：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/20231024103554.png" alt="20231024103554"><br>逆元×256&#x3D;1（不正规的解释）  </p><h4 id="中国剩余定理求解同余方程组"><a href="#中国剩余定理求解同余方程组" class="headerlink" title="中国剩余定理求解同余方程组"></a>中国剩余定理求解同余方程组</h4><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/20231024104644.png" alt="20231024104644">             </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day11[2]</title>
      <link href="/posts/c4a9edb5.html"/>
      <url>/posts/c4a9edb5.html</url>
      
        <content type="html"><![CDATA[<h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-07%20230552.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20155604.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20155828.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20155732.png"></p><h2 id="存储器性能指标"><a href="#存储器性能指标" class="headerlink" title="存储器性能指标"></a>存储器性能指标</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20155927.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20160004.png"></p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>位：最小单位<br>字节：8位<br>字：32位计算机的字就是32位<br>字长：运算器位数和寄存器宽度（MAR）<br>速度的K M G T是10的次幂<br>按字寻址类题型:<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-16%20160714.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231016165656.jpg"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20231016165724.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day11</title>
      <link href="/posts/5da0bc0f.html"/>
      <url>/posts/5da0bc0f.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于补码，原码，移码表示范围的一点补充"><a href="#关于补码，原码，移码表示范围的一点补充" class="headerlink" title="关于补码，原码，移码表示范围的一点补充"></a>关于补码，原码，移码表示范围的一点补充</h1><p>在计算机中，二进制的表示可以看作时钟的表示<br>举例：<br>假设现在是2点，你想把时钟调成10点，那么有两种方法，一种是直接顺时针转动8个小时，另一种则是逆时针转动4个小时。<br>由于原码有两个0表示方法：100000….和000000…所以正负各少一个表示范围。<br>用数学方法表示：<br>因为现在想确定补码1000的数值，那么列算式证明<br>1000+0111&#x3D;1111<br>原码为1001&#x3D;-1 得补码1000代表-8。<br>所以补码的10000….代表负数的最小范围。<br>移码类似，因为移码是补码的符号位取反所得。所以移码的0000&#x3D;补码的1000，以此类推0000&#x3D;-8。所以移码的最小值为0000…..。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day10</title>
      <link href="/posts/2aa78c99.html"/>
      <url>/posts/2aa78c99.html</url>
      
        <content type="html"><![CDATA[<h1 id="定点运算"><a href="#定点运算" class="headerlink" title="定点运算"></a>定点运算</h1><h2 id="算术位移与逻辑位移"><a href="#算术位移与逻辑位移" class="headerlink" title="算术位移与逻辑位移"></a>算术位移与逻辑位移</h2><p> 逻辑移位是无符号数的移位<br> 算术移位是有符号数的移位<br> 寄存器内容为：01010011<br> 算术左移：0，0100110<br> 逻辑左移：10100110<br> 算术右移：0，00101001（根据符号位加数）<br> <img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230920124037.jpg"></p><h2 id="原码乘法"><a href="#原码乘法" class="headerlink" title="原码乘法"></a>原码乘法</h2><p>例子：<br>A × B<br>&#x3D;A × 0.1011<br>&#x3D;0.1A  + 0.00A   + 0.001A + 0.0001A<br>&#x3D;0.1(A + 0.0A    + 0.01A  + 0.001A)<br>&#x3D;0.1(A + 0.1(0A  + 0.1A   + 0.01A))<br>&#x3D;0.1(A + 0.1(0A  + 0.1(A  + 0.1A)))<br>&#x3D;0.1(A + 0.1(0A  + 0.1(A  + 0.1(A + 0))))<br>如下算法：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230920180531.jpg"></p><h3 id="booth乘法"><a href="#booth乘法" class="headerlink" title="booth乘法"></a>booth乘法</h3><p>设[x]补&#x3D;x0. x1 x2 x3 … xn<br>[y]补&#x3D;y0. y1 y2 y3 … yn<br>如下：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230920181330.jpg"><br>求解过程如下：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230920183433.jpg"></p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>yi+1 - yi<br>&#x3D;0时，部分乘<br>&#x3D;1时加[x]补，再右移一位<br>&#x3D;-1时加[-x]补，再右移一位  </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day09</title>
      <link href="/posts/4a60057c.html"/>
      <url>/posts/4a60057c.html</url>
      
        <content type="html"><![CDATA[<h1 id="ALU-加法器-设计"><a href="#ALU-加法器-设计" class="headerlink" title="ALU(加法器)设计"></a>ALU(加法器)设计</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-09%20210422.png"><br>“4位ALU的AB各四线路输入了4bit信息”  </p><h2 id="与或非基本逻辑运算"><a href="#与或非基本逻辑运算" class="headerlink" title="与或非基本逻辑运算"></a>与或非基本逻辑运算</h2><p>与：只要真值中有0，则为0<br>或：只要真值中有1，则为1<br>非：真值取反<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-09%20212234.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-09%20212851.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day08</title>
      <link href="/posts/3d6735ea.html"/>
      <url>/posts/3d6735ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="回顾及理解"><a href="#回顾及理解" class="headerlink" title="回顾及理解"></a>回顾及理解</h1><p>假设为8位寄存器，原码为1.1111111，现在加上0.0000001得11.0000000（仍然用第一位表示符号位。）反码为10.1111111，补码为11.0000000。因为寄存器为8位，所以为1.0000000，按补码逆规则求得原码：<br>1.0000000-1&#x2F;128&#x3D;1.1111111（向高位借位）然后取反得1.0000000，因为曾向高位借位，所以并不是看起来的-0.0，而是-1.0。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day07</title>
      <link href="/posts/add8287b.html"/>
      <url>/posts/add8287b.html</url>
      
        <content type="html"><![CDATA[<h1 id="原反补码特性对比"><a href="#原反补码特性对比" class="headerlink" title="原反补码特性对比"></a>原反补码特性对比</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-06%20210055.png"><br>-64+-64&#x3D;-128<br>若用原码表示则溢出，补码则不溢出  </p><h1 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-06%20212242.png"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-06%20212211.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day06</title>
      <link href="/posts/dadf18ed.html"/>
      <url>/posts/dadf18ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="带符号的整数的运算"><a href="#带符号的整数的运算" class="headerlink" title="带符号的整数的运算"></a>带符号的整数的运算</h1><h2 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h2><p>原码是：<br>19 &#x3D; 0，0010011（8bit寄存器）<br>-19 &#x3D; 1，0010011<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-05%20204222.png"></p><h2 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h2><p>除符号位，其他按位取反。</p><h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><p>反码加1</p><h1 id="补码和原码相互转换"><a href="#补码和原码相互转换" class="headerlink" title="补码和原码相互转换"></a>补码和原码相互转换</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-05%20215410.png"></p><h1 id="补码的减法"><a href="#补码的减法" class="headerlink" title="补码的减法"></a>补码的减法</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-05%20223300.png"><br>（与无符号整数减法一样）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-05%20220012.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>存储字长与机器字长的区别,机器字长一般等于内部寄存器的位数,而MDR位数与存储字长相等,因此我们可以理解为一般情况下,机器字长等于存储字长.要注意是一般情况下,在’二’班情况下,机器字长可以是存储字长的1,2,4等倍.</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day05</title>
      <link href="/posts/43d64957.html"/>
      <url>/posts/43d64957.html</url>
      
        <content type="html"><![CDATA[<h1 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h1><p>8421码：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-04%20204023.png"><br>5+8&#x3D;13&#x3D;1101 加6后 0001 0011刚好为13<br>2421码（5及以后首位为1）<br>余3码（所有加3）  </p><h1 id="无符号整数的表示和运算"><a href="#无符号整数的表示和运算" class="headerlink" title="无符号整数的表示和运算"></a>无符号整数的表示和运算</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-04%20204759.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-04%20203909.png">  </p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>机器字长是指cpu一次能处理的数据位数字长越长，数的范围越大，精度越高。他直接影响了加法器ALU，数据总线以及存储字长的位数，所以不能单纯的从精度和范围来考虑。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day04</title>
      <link href="/posts/34d179c1.html"/>
      <url>/posts/34d179c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="进位计数制"><a href="#进位计数制" class="headerlink" title="进位计数制"></a>进位计数制</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-03%20191036.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-03%20190850.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-03%20190812.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-03%20134734.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day03</title>
      <link href="/posts/aab5ec62.html"/>
      <url>/posts/aab5ec62.html</url>
      
        <content type="html"><![CDATA[<h1 id="层次结构与性能指标"><a href="#层次结构与性能指标" class="headerlink" title="层次结构与性能指标"></a>层次结构与性能指标</h1><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/day03%E5%9B%BE1.png"><br>（ 层次结构总结 ）</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/day03%E5%9B%BE2.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/n%E4%B8%AA2%E8%BF%9B%E5%88%B6%E4%BD%8D%E7%9A%84%E7%90%86%E8%A7%A3.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/day03%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E5%8D%95%E4%BD%8D.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/cpu%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E7%9A%84%E8%AE%A1%E7%AE%97.png"><br>*数据通路带宽：数据总线一次所能并行传送的信息位数<br>*吞吐量：指系统在单位时间内处理请求的数量<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E6%80%9D%E8%80%83.png">  </p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/day03%E5%9B%BE3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day02</title>
      <link href="/posts/ddb2dcf4.html"/>
      <url>/posts/ddb2dcf4.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机运算过程"><a href="#计算机运算过程" class="headerlink" title="计算机运算过程"></a>计算机运算过程</h1><h2 id="·控制器基本介绍"><a href="#·控制器基本介绍" class="headerlink" title="·控制器基本介绍"></a>·控制器基本介绍</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20135632.png">  </p><h2 id="·运算y-a-b-c的例子"><a href="#·运算y-a-b-c的例子" class="headerlink" title="·运算y&#x3D;a*b+c的例子"></a>·运算y&#x3D;a*b+c的例子</h2><p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/0.png"><br>*X为操作数寄存器<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/02%E5%9B%BE%E7%89%87.png">  </p><p>····当执行乘法操作时把ACC里存的值传入X，然后CU控制ALU进行乘法计算并将值传入ACC。····<br>····加法与上一步类似。····<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/02%E5%9B%BE%E7%89%871.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/02%E5%9B%BE%E7%89%872.png"></p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>冯诺依曼机的特点：<br>1.冯·诺依曼计算机主要由五大部件组成，分别是：运算器、控制器、存储器、输入设备和输出设备；</p><p>2.冯诺依曼体系结构的指令和数据均采用二进制码表示；</p><p>3.指令和数据以同等地位存放于存储器中，均可按地址寻访；</p><p>4.指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数所在存储器中的位置；</p><p>5.指令在存储器中按顺序存放，通常指令是按顺序执行的，特定条件下，可以根据运算结果或者设定的条件改变执行顺序；</p><p>6.机器以运算器为中心，输入输出设备和存储器的数据传送通过运算器。</p><p>现在的计算机基本以存储器为中心，下图为以存储器为中心的计算机结构框图。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新学习计组day01</title>
      <link href="/posts/44bb8d4e.html"/>
      <url>/posts/44bb8d4e.html</url>
      
        <content type="html"><![CDATA[<p>#计算机五大部件：<br>输入输出设备，主存，运算器（算术运算，逻辑运算），控制器<br>现代计算器与冯诺依曼机的区别：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-31%20155732.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-08-31%20155637.png"><br>主储存器：<br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/1.png"><br><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-09-01%20133608.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习/计组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>核污水真敢放啊捏麻麻的，吃我一记大海无量！！</title>
      <link href="/posts/8b39d8e0.html"/>
      <url>/posts/8b39d8e0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://kafashiji.oss-cn-beijing.aliyuncs.com/DHWL.png"></p><p>哈皮,吃我一船锚!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 热点 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>这些网站还不错哦</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分類</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>標籤</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/picture/index.html"/>
      <url>/picture/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://kafashiji.oss-cn-beijing.aliyuncs.com/a29b340b-d02c-499c-abd6-c4dc01cffbb6_base_resized(1).jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">看点好康的(*^_^*)</div>  <p>不许瑟瑟！！！</p>  <a href='/picture/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230912201533.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">放些动漫截图吧</div>  <p>最近是弗莉莲哒</p>  <a href='/picture/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://kafashiji.oss-cn-beijing.aliyuncs.com/kln.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">再说再说</div>  <p>不想管拉</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/picture/wallpaper.html"/>
      <url>/picture/wallpaper.html</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="450" data-limit="10">    <span class="gallery-data">[{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/a29b340b-d02c-499c-abd6-c4dc01cffbb6_base_resized(1).jpg","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/d7aa5b72-daa6-4c2c-abbe-134b40241c3a_base_resized(1).jpg","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/Cache_-2039f3f15065fce7(1).png","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/c3cce2fe-65e9-418d-b120-63899b77dd7e_base_resized(1).jpg","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/bbbf09dd-ff91-4e5f-ae3f-8bf851da4ae0(1).jpg","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/85261c03-c715-4bf0-bc7c-3dd2c8f37293_base_resized(1).jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/picture/marvel.html"/>
      <url>/picture/marvel.html</url>
      
        <content type="html"><![CDATA[<div class="gallery">    <div class="fj-gallery lazyload data" data-rowHeight="450" data-limit="10">    <span class="gallery-data">[{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-01%20010454.png","alt":""},{"url":"https://kafashiji.oss-cn-beijing.aliyuncs.com/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-10-01%20011020.png","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div>]]></content>
      
    </entry>
    
    
  
</search>
